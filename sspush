#!/usr/bin/env bash
#
# sspush
# Date: 5/9/2023
#
# A tool for macOS and Linux that pushes a screencapture/image/file 
# to a remote web server of your choosing via scp.
# 
# by CtrlAltMech
#

# Exit on error
set -e
#set -x

# TODO: Add optional overrides in configuration file.
# Default capture utilities
# You may set your own here if they're not in the $PATH:
# Example: readonly wayland_capture=/path/to/your/grim/installation
readonly wayland_vid_capture=wf-recorder
readonly wayland_capture=grim
readonly x11_capture=maim
readonly x11_vid_capture=ffmpeg
readonly macos_capture=screencapture

# TODO: Add optional overrides in configuration file.
# Default clipboard utilities
# You may set your own here if they're not in the $PATH
# Example: readonly wayland_clipboard=/path/to/your/clipboard/installation
readonly wayland_clipboard="wl-copy"
readonly x11_clipboard="xclip"
readonly macos_clipboard="pbcopy"

# Configuration path
readonly CONFIG="$HOME/.config/sspushrc"

# Output Colors
readonly RED="\e[31m"
readonly GREEN="\e[32m"
readonly YELLOW="\e[33m"
readonly ENDCOLOR="\e[0m"

# Main logic
main () {
    conf_check
    path_verify
    display_serv_check
    clipboard_check
    dep_check "$1"

    if [[ -z "$1" ]]; then # No argument, pushes most recent screencap in folder
        find_file
        echo -e "${YELLOW}Your most recent file is $(basename "$orig_file").${ENDCOLOR}"
        push_logic
        exit 0

    elif [[ -e "$1" ]]; then # Pushes file specified in argument
        find_file "$1"
        echo -e "${YELLOW}Your selected file is $(basename "$orig_file")${ENDCOLOR}"
        push_logic
        exit 0
    fi

    # Option branch logic
    while getopts ':iahv' OPTION;  
    do
        case "$OPTION" in
            i) # Interactive image screencapture option
                if [[ "$#" -ge 3 ]]; then
                    help_msg
                    exit 1
                else
                    screen_handler "$1" "$2"
                fi
            ;;
            
            a) # Image capture entire desktop
                if [[ "$#" -ge 3 ]]; then
                    help_msg
                    exit 1
                else
                    screen_handler "$1" "$2"
                fi
            ;;

            v) # Capture video of current screen on macOS, interactive mode on Linux distros.
                if [[ "$#" -ge 3 ]]; then
                    help_msg
                    exit 1
                else
                    screen_handler "$1" "$2"
                fi
            ;;

            h) # Print syntax help
                help_msg
                exit 1
            ;;

            \?) # Catch everything else
                help_msg
                exit 1
            ;;
        esac
    done
}


# Help message
help_msg () {
    echo "Syntax: $(basename "$0") [-i|-a|-v]  /optional/file/path/"
    echo "options:"
    echo "-i    Interactive mode, select portion of screen to capture and push to server."
    echo "-a    Capture everything on screen and push to server."
    echo "-v    Capture video of current screen. (macOS does full screen, Linux uses slop for interactive screencapture)"
}

# Checks for config file, prompt to create if none exists.
# If config file exists, make sure its filled out.
conf_check () {
    if ! [[ -f $CONFIG ]]; then
        conf_prompt
    else
        # shellcheck source-path=SCRIPTDIR/../../.config/
        # shellcheck source=sspushrc
        . "$CONFIG" 
        conf_var_check 
    fi
}

# If no configuration file is seen it will prompt to generate one 
conf_prompt () {
    local conf_choice
    read -p "$(echo -e "${YELLOW}No configuration file found. Would you like to create one? (y/n): ${ENDCOLOR}")" conf_choice
    
    while ! [[ $conf_choice =~ (^y$|^Y$|^n$|^N$) ]]
    do
        read -p "$(echo -e "${RED}Not a valid option. Would you like to create a config file? (y/n): ${ENDCOLOR}")" conf_choice
    done

    if [[ $conf_choice =~ (^y$|^Y$) ]]; then
        conf_make
    elif [[ "$conf_choice" =~ (^n$|^N$) ]]; then
        echo -e "${YELLOW}Goodbye!${ENDCOLOR}"
        exit 0
    fi
}

# Creates the configuration file
conf_make () {
    
	cat <<- EOF > "$CONFIG"
	# Config file for sspush
	 
	# Filepath where screenshots are stored
	SSFILEPATH=""
	
	# Remote directory where screenshots are stored
	REMOTEDIR=""
	
	# Username for access to server
	USERNAME="$USER"
	
	# Private key location (script only works with ssh keys)
	KEYPATH=""
	
	# SSH port
	PORT="22"
	
	# Server IP or DNS name
	SERVER=""
	
	# Base link location (Link minus the image that the user will visit).
	# Example https://mysite.net/pics/<your image name>.jpg"
	BASELINK=""
	
	# Allow/Deny desktop notifications
	NOTIFICATIONS=""
	
	# Specify which clipboard to use (clipboard or primary)
	CLIPBOARD="clipboard"

	EOF
    echo -e "${GREEN}Config file $CONFIG created!${ENDCOLOR}"
    $EDITOR $CONFIG # Open config in editor
    exit 0
}


# Verify that all configuration variables have been set, error if not
conf_var_check () {
    local msg="$(echo -e "${RED}All configuration variables need to be set at runtime.${ENDCOLOR}")"
    : "${SSFILEPATH:?$msg}" 
    : "${REMOTEDIR:?$msg}" 
    : "${USERNAME:?$msg}" 
    : "${KEYPATH:?$msg}" 
    : "${PORT:?$msg}" 
    : "${SERVER:?$msg}" 
    : "${BASELINK:?$msg}" 
    : "${NOTIFICATIONS:?$msg}" 
    : "${CLIPBOARD:?$msg}" 
}

path_verify () {
    # ensure the remotepath ends in a /
    # since we're concatenating the path with the name of the generated file
    # path + '/' + filename.png
    local remote_path_len=${#REMOTEDIR}
    local last_char=${REMOTEDIR:remote_path_len-1:1}
    if [[ $last_char != '/' ]]; then
        REMOTEDIR=$REMOTEDIR'/'
    fi

    local local_path_len=${#SSFILEPATH}
    local last_char=${SSFILEPATH:local_path_len-1:1}
    if [[ $last_char != '/' ]]; then
        SSFILEPATH=$SSFILEPATH'/'
    fi
}

# Checks which display server is running and sets proper capture utility
display_serv_check () {
    if [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
        disp_server="$XDG_SESSION_TYPE"
        capture="$wayland_capture"
        vid_capture="$wayland_vid_capture"
    elif [[ "$XDG_SESSION_TYPE" == "x11" ]]; then
        disp_server=$XDG_SESSION_TYPE
        capture="$x11_capture"
        vid_capture="$x11_vid_capture"
    elif [[ "$XDG_SESSION_TYPE" == "" ]]; then
        disp_server="macos" # macOS does not use XDG by default
        capture="$macos_capture"
        vid_capture="$macos_capture" # Set for consistency
    fi
}

# Clipboard check
clipboard_check () {
    case $disp_server in
        wayland)
            clip_util="$wayland_clipboard"
            [[ $CLIPBOARD == "clipboard" ]] || clip_util="wl-copy --primary"
            ;;
        x11)
            clip_util="$x11_clipboard -sel $CLIPBOARD"
            ;;
        macos)
            clip_util="$macos_clipboard"
            ;;
        *)
            echo -e "${RED}Unable to determine display server. Exiting...${ENDCOLOR}"
            exit 1
            ;;
    esac
}

# check for required utilities depending on platform
# TODO: Work on a cleaner way to implement this.
dep_check () {
    if [[ "$disp_server" == "wayland" ]]; then
        local img_capture="$wayland_capture"
        local vid_capture="$wayland_vid_capture"
    elif [[ "$disp_server" == "x11" ]]; then
        local img_capture="$x11_capture"
        local vid_capture="$x11_vid_capture"
    elif [[ "$disp_server" == "macos" ]]; then
        local img_capture=$macos_capture # TODO: Just a placeholder, macOS comes with this by default on recent versions. Fix later.
    fi


    if [[ ! -x $(which "$img_capture") ]] && [[ "$1" =~ -a|-i ]]; then
        echo -e "${RED}Capture utility $img_capture not found! ${ENDCOLOR}"
        echo "$img_capture is required on $disp_server to capture images."
        echo "Aborting..."
        exit 1

    elif [[ $disp_server == "wayland" ]] && [[ "$1" =~ -v ]]; then
      if [[ ! -x $(which "$vid_capture" 2>/dev/null) ]]; then
          echo -e "${RED}Video capture utility $vid_capture not found! ${ENDCOLOR}"
          echo "$vid_capture is required on wayland to capture video."
          echo "Aborting..."
          exit 1
      fi
    fi
}

# Finds the file to push to remote server
find_file() {
    if [[ "$(ls -A "$SSFILEPATH" 2>/dev/null)" ]] && [[ -z "$1" ]]; then # No argument provided, most recent file found
        orig_file="$SSFILEPATH"$(ls -Art "$SSFILEPATH" | tail -n 1)
        name_gen "$(ls -Art "$SSFILEPATH" | tail -n 1)"
    elif [[ "$(ls -A "$1"  2>/dev/null)" ]] && [[ -n "$1" ]]; then # Argument provided. Pick selected photo.
        orig_file="$1"
        name_gen "$1"
    else
        echo -e "${RED}File not found. Try again...${ENDCOLOR}"
        exit 1
    fi
}

# Handles which screencapture utility to use based on display server.
screen_handler () {
    local arg="$1"
    local filepath="$2"
    if [[ -z "$filepath" ]] && [[ "$arg" != "-v" ]]; then 
        filepath=$SSFILEPATH"Screencapture_$(date +"%Y%m%d_%H%M%S").png";
    elif [[ -z "$filepath" ]]; then
        filepath=$SSFILEPATH"Screencapture_$(date +"%Y%m%d_%H%M%S").mp4";
    else
        filepath=$SSFILEPATH$2
    fi

    case "$disp_server" in
        wayland)
            echo -e "${YELLOW}Screencapture in progress, file to be created: $(basename "$filepath")${ENDCOLOR}"
            wayland_screencapture "$arg" "$filepath"
            ;;

        x11)
            echo -e "${YELLOW}Screencapture in progress, file to be created: $(basename "$filepath")${ENDCOLOR}"
            x11_screencapture "$arg" "$filepath"
            ;;

        macos)
            echo -e "${YELLOW}Screencapture in progress, file to be created: $(basename "$filepath")${ENDCOLOR}"
            mac_screencapture "$arg" "$filepath"
            ;;
    esac
}

# Creates the new randomly generated filename for the remote destination
name_gen () {
    local filename=$1
    local extension=${filename##*.}
    filename=$(echo $RANDOM | md5sum | head -c 8; echo;)
    generated_name="$filename.$extension"
}

# macOS screencapture handler
mac_screencapture () {
    case "$1" in
        -i)
            $capture -i "$2"
            find_file "$2"
            push_logic
        ;;

        -a)
            $capture "$2"
            find_file "$2"
            push_logic
        ;;

        -v)
            # TODO: Add optional desktop notification when recording starts and when it stops.
            notifications "Recording started..."
            $vid_capture -v "$2"
            notifications "Recording stopped!"
            find_file "$2"
            push_logic
        ;;

    esac
}

# Wayland screencapture
wayland_screencapture () {
    case "$1" in
        -i)
            $capture -g "$(slurp)" "$2"
            find_file "$2"
            push_logic
        ;;

        -a)
            $capture "$2"
            find_file
            push_logic
        ;;

        -v)
            # TODO: Add optional desktop notification when recording starts and when it stops.
            # TODO: Add debug option to not send output to /dev/null. Maybe?
            echo "Press 'CTRL + c' to end recording..."
            notifications "Recording started..."
            $vid_capture -g "$(slurp)" -x yuv420p -f "$2" &> /dev/null # No hidebanner option in wf-recorder
            notifications "Recording stopped!"
            find_file "$2"
            push_logic
        ;;

    esac
}

# X11 screencapture 
x11_screencapture () {
    case "$1" in
        -i)
            $capture -s "$2"
            find_file "$2"
            push_logic
        ;;

        -a)
            $capture "$2"
            find_file
            push_logic
	    ;;
	
	    -v)
            # TODO: Add optional desktop notification when recording starts and when it stops.
            local screen_sel=$(slop -f "%x %y %w %h")
	        read -r X Y W H < <(echo $screen_sel)
	        echo "Press 'q' to end recording..."
            notifications "Recording started..."
	        $vid_capture -hide_banner -loglevel error -f x11grab -s "$W"x"$H" -framerate 60 -i $DISPLAY.0+$X,$Y \
            -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" -preset ultrafast -pix_fmt yuv420p "$2"
            notifications "Recording stopped!"
	        find_file "$2"
	        push_logic
        ;;
    esac
} 

# Notifcations on desktop
notifications() {
    shopt -s nocasematch
    if [[ "$NOTIFICATIONS" == "allow" ]]; then
        case "$disp_server" in
            "macos")
                osascript -e 'display notification "'"$1"'" with title "sspush"'
                ;;

            "x11")
                #notify-send -t 4000 "Uploaded!" "$(basename "$orig_file")"
                notify-send -t 4000 "sspush" "$1"
                ;;

            "wayland")
                #notify-send -t 4000 "Uploaded!" "$(basename "$orig_file")"
                notify-send -t 4000 "sspush" "$1"
                ;;
            *)
                :
                ;;
        esac

    else
        :
    fi
}



# Takes all the curated information, pushes it to the server, provides a link
push_logic () {
    scp -i "$KEYPATH" "$orig_file" "$USERNAME@$SERVER":"$REMOTEDIR$generated_name" # Transfer that file to the remote server 
    notifications "$(basename "$orig_file") uploaded!" # Shows a notification if allowed in config file
    case "$disp_server" in
        macos)
            echo "$BASELINK$generated_name" | $clip_util
            ;;
        x11)
            echo "$BASELINK$generated_name" | $clip_util
            ;;
        wayland)
            echo "$BASELINK$generated_name" | $clip_util
            ;;
        *)
            echo -e "${RED}Unable to determine clipboard utility, nothing copied....${ENDCOLOR}"
            echo -e "${GREEN}Link to file $BASELINK$generated_name${ENDCOLOR}"
            exit 1
            ;;
    esac

    echo -e "${GREEN}Link $BASELINK$generated_name has been copied to clipboard!${ENDCOLOR}"

}

main "$@"
