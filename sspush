#!/usr/bin/env bash
#
# sspush
# Date: 5/9/2023
#
# A tool for macOS and Linux that pushes a screencapture/image/file 
# to a remote web server of your choosing via scp.
# 
# by CtrlAltMech
#


# Exit on error
set -e
# set -x
# Configuration path
readonly CONFIG="$HOME/.sspushrc"

# Main logic
main () {
    conf_check
    disp_server="$(display_serv_check)"
    os="$(os_check)"

    if [[ -z "$1" ]]; then
        find_file
        echo "Your selected file is $(basename $orig_file)"
        push_logic
        exit 0

    elif [[ -e "$1" ]]; then
        find_file "$1"
        echo "Your selected file is $(basename $orig_file)"
        push_logic
        exit 0

    fi

    while getopts ':i:a:s:' OPTION; 
    do
        case "$OPTION" in
            i) # Interactive screencapture option
                arg="$OPTARG"
                echo "Option a was chosen OPTARG = $OPTARG which is equal to arg = $arg"
            ;;
            
            a) # Capture everything
                arg="$OPTARG"
                echo "Option b was chosen OPTARG = $OPTARG which is equal to arg = $arg"
            ;;

            s) # Capture specific monitor
                arg="$OPTARG"
                echo "Option c was chosen OPTARG = $OPTARG which is equal to arg = $arg"
            ;;
            \?)
                echo "Usage: $(basename $0) [-i] [-a] [-s] /optional/file/path/"
                exit 1
            ;;
        esac
    done

    if [[ "$arg" == "" ]]; then
        echo "No input file"
    else
        echo "Input is $arg"
    fi
}


# Configuration check
conf_check () {
    if ! [[ -f $CONFIG ]]; then
        conf_prompt
    else
        . "$CONFIG" 
        conf_var_check 
    fi
}

# Clipboard check
clipboard_check () {
    if [[ "$disp_server" == "wayland" ]]; then
       echo "wl-copy"
    elif [[ "$disp_server" == "x11" ]]; then 
       echo "xclip"
    elif [[ "$disp_server" == "" ]]; then
        echo "pbcopy"
    else
        echo "Unable to determine OS. Exiting..."
        exit 1
    fi
}

# If no configuration file is seen it will prompt to generate one 
conf_prompt () {
    read -p "No configuration file found. Would you like to create one? (y/n): " conf_choice
    
    while ! [[ $conf_choice =~ (^y$|^Y$|^n$|^N$) ]]
    do
        read -pr "Not a valid option. Would you like to create a config file? (y/n): " conf_choice
    done
    if [[ $conf_choice =~ (^y$|^Y$) ]]; then
        conf_make
    elif [[ "$conf_choice" =~ (^n$|^N$) ]]; then
        echo "Goodbye!"
        exit 0
    fi
}

# Creates the configuration file
conf_make () {
    
	cat <<- EOF > "$CONFIG"
	# Config file for sspush
	 
	# Filepath where screenshots are stored
	SSFILEPATH=""
	
	# Remote directory where screenshots are stored
	REMOTEDIR=""
	
	# Username for access to server
	USERNAME=""
	
	# Private key location (script only works with ssh keys)
	KEYPATH=""
	
	# SSH port
	PORT=""
	
	# Server IP or DNS name
	SERVER=""
	
	# Base link location (Link minus the image that the user will visit).
	# Example https://mysite.net/pics/<your image name>.jpg"
	BASELINK=""
	
	# Allow/Deny desktop notifications
	NOTIFICATIONS=""
	EOF
    echo "Config file created!"
    exit 0
}

# Checks info provided is correct and sets variables
pre_check () {
    # Mac options, will need to get appropriate options to suit both linux/mac
    local option_pattern_full='^$|^-b$|^-C$|^-i$|^-m$|^-v[g]?$'
    local image_pattern='^-b$|^-C$|^-i$|^-m$'
    local vid_pattern='^-v[g]?$'
    disp_server="$(display_serv_check)"
    os="$(os_check)"
    
    if [[ "$disp_server" == "wayland" ]]; then
        copy_tool="$(wl-copy)"
    elif [[ "$disp_server" == "x11" ]]; then 
        copy_tool="$(xclip)"
    elif [[ "$os" == "Darwin" ]]; then
        copy_tool="$(pbcopy)"
    else
        echo "Unable to determine OS. Exiting..."
        exit 1
    fi

    
    if ! [[ -f $CONFIG ]]; then
        conf_prompt
    else
        . "$CONFIG" 
        conf_var_check 
    fi

    if ! [[ "$1" =~ $option_pattern_full ]]; then
        echo "Your option doesn't match"
        exit 1
    else
        arg="$1"
        echo "Your option does match" 
    fi
}

# Checks what OS this is running on
os_check () {
    if [[ "$(uname -s)" == "Darwin" ]]; then
        echo "Darwin"
    elif [[ "$(uname -s)" == "Linux" ]]; then
        echo "Linux"
    fi
}

# Checks which display server is running
display_serv_check () {
    if [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
        echo "wayland"
    elif [[ "$XDG_SESSION_TYPE" == "x11" ]]; then
        echo "x11"
    elif [[ "$XDG_SESSION_TYPE" == "" ]]; then
        echo "macos" # I know this is not a display server
    fi
}

# Verify that all configuration variables have been set, error if not
conf_var_check () {
    local msg="All configuration variables need to be set at runtime."
    : "${SSFILEPATH:?$msg}" 
    : "${REMOTEDIR:?$msg}" 
    : "${USERNAME:?$msg}" 
    : "${KEYPATH:?$msg}" 
    : "${PORT:?$msg}" 
    : "${SERVER:?$msg}" 
    : "${BASELINK:?$msg}" 
    : "${NOTIFICATIONS:?$msg}" 
    : "${CLIPBOARD:?$msg}" 
} 

# Creates the new randomly generated filename for the remote destination
name_gen () {
    local filename=$1
    local extension=${filename##*.}
    filename=$(echo $RANDOM | md5sum | head -c 8; echo;)
    generated_name="$filename.$extension"
}

# macOS screencapture handler
mac_screencapture () {
    local option_pattern_full="^-b$|^-C$|^-i$|^-m$|^-v[g]?$"
    local image_pattern="^-b$|^-C$|^-i$|^-m$"
    local vid_pattern="^-v[g]?$"
    local file_name
    if [[ $1 =~ $vid_pattern ]] && [[ -z $2 ]]; then
       file_name=$SSFILEPATH"Screencapture_$(date +"%Y%m%d_%H%M%S").mp4"
    elif [[ $1 =~ $image_pattern ]] && [[ -z $2 ]]; then
       file_name=$SSFILEPATH"Screenshot_$(date +"%Y%m%d_%H%M%S").png"
    elif [[ $1 =~ $option_pattern_full ]] && [[ -n $2 ]]; then
       file_name="$SSFILEPATH$2"
    else
       echo "Invalid argument."
       exit 1
    fi
    screencapture "$1" "$file_name" 
}

# Finds the file to push to remote server
find_file() {
    if [[ "$(ls -A "$SSFILEPATH" 2>/dev/null)" ]] && [[ -z "$1" ]]; then # No argument provided, most recent file found
        orig_file="$SSFILEPATH"$(ls -Art "$SSFILEPATH" | tail -n 1)
        name_gen "$(ls -Art "$SSFILEPATH" | tail -n 1)"
    elif [[ "$(ls -A "$1"  2>/dev/null)" ]] && [[ -n "$1" ]]; then # Argument provided. Pick selected photo.
        orig_file="$1"
        name_gen "$1"
    else
        echo "FILE NOT FOUND!"
        exit 1
    fi
}

# Takes all the curated information, pushes it to the server, provides a link
push_logic () {
    scp -i "$KEYPATH" "$orig_file" "$USERNAME@$SERVER":"$REMOTEDIR$generated_name" # Transfer that file to the remote server
    if [[ $(display_serv_check) == "macos" ]]; then
        echo "$BASELINK$generated_name" | pbcopy # Copies to macOS clipboard
    elif [[ $(display_serv_check) == "x11" ]]; then
        echo "$BASELINK$generated_name" | xclip # Copies to xclip clipboard
    elif [[ $(display_serv_check) == "wayland" ]]; then
        echo "$BASELINK$generated_name" | wl-copy # Copies to wl-copy clipboard 
    else
        echo "Unable to determine clipboard utility, nothing copied...."
        echo "Link to file $BASELINK$generated_name"
        exit 1
    fi
    echo "Link to file $BASELINK$generated_name has been copied to clipboard!"
}

# Start of logic
# main "$1"
main "$@"
# pre_check "$1"
# find_file
# echo "Your most recent file is...$orig_file"
#push_logic
# elif [[ "$#" == "1" && -e "$1" ]]; then # No option, only file selected to push
#     find_file "$1"
#     echo "Your selected file is $orig_file"
#     push_logic
# elif [[ $(os_check) == "Darwin" ]]; then
#     mac_screencapture "$1" "$2"
#     find_file
#     echo "Your selected file is $orig_file" 
#     push_logic
# elif [[ $(os_check) == "Linux" ]]; then
#     : # This is just a placeholder for linux support
# else
#     echo "Not a valid option."
# fi
