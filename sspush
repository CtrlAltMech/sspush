#!/usr/bin/env bash
#
# sspush
# Date: 5/9/2023
#
# A tool for macOS and Linux that pushes a screenshot/image 
# to a remote web server of your choosing via scp.
# 
# by CtrlAltMech
#


# Exit on error
set -e

# Configuration path
readonly CONFIG="$HOME/.sspushrc"

# If no configuration file is seen it will prompt to generate one 
conf_prompt () {
    read -p "No configuration file found. Would you like to create one? (y/n): " conf_choice
    
    while ! [[ $conf_choice =~ (^y$|^Y$|^n$|^N$) ]]
    do
        read -pr "Not a valid option. Would you like to create a config file? (y/n): " conf_choice
    done
    if [[ $conf_choice =~ (^y$|^Y$) ]]; then
        conf_make
    elif [[ "$conf_choice" =~ (^n$|^N$) ]]; then
        echo "Goodbye!"
        exit 0
    fi
}

# Creates the configuration file
conf_make () {
	
	touch "$CONFIG"
	echo -e "# Config file for sspush\n" > "$CONFIG"
	echo -e "# Filepath where screenshots are stored" >> "$CONFIG"
	echo -e "SSFILEPATH=\"\"\n" >> "$CONFIG"
	echo -e "# Remote directory where screenshots will be sent" >> "$CONFIG"
	echo -e "REMOTEDIR=\"\"\n" >> "$CONFIG"
	echo -e "# Username for access to server" >> "$CONFIG"
	echo -e "USERNAME=\"\"\n" >> "$CONFIG"
	echo -e "# Private key location (script only works with ssh keys)" >> "$CONFIG"
	echo -e "KEYPATH=\"\"\n" >> "$CONFIG"
	echo -e "# SSH port" >> "$CONFIG"
	echo -e "PORT=\"\"\n" >> "$CONFIG"
	echo -e "# Server IP or DNS name" >> "$CONFIG"
	echo -e "SERVER=\"\"\n" >> "$CONFIG"
	echo -e "# Base link location (Link minus the image that the user will visit). \n# Example https://mysite.net/pics/<your image name>.jpg" >> "$CONFIG"
	echo -e "BASELINK=\"\"\n" >> "$CONFIG"
	echo -e "# Allow/Deny desktop notifications" >> "$CONFIG"
	echo -e "NOTIFICATIONS=\"\"" >> "$CONFIG"
	echo -e "\nConfig file created!"
	exit 0
}

# Initial check the config exists and all options set.
pre_check () {
    if ! [[ -f $CONFIG ]]; then
        conf_prompt
    else
        . "$CONFIG" # Source the configuration file
        conf_var_check 
    fi
}

# Checks what OS this is running on
os_check () {
	if [[ "$(uname -s)" == "Darwin" ]]; then
		echo "Darwin"
	elif [[ "$(uname -s)" == "Linux" ]]; then
		echo "Linux"
	fi
}

# Verify that all configuration variables have been set, error if not
conf_var_check () {
    local msg="All configuration variables need to be set at runtime."
    : "${SSFILEPATH:?$msg}" 
    : "${REMOTEDIR:?$msg}" 
    : "${USERNAME:?$msg}" 
    : "${KEYPATH:?$msg}" 
    : "${PORT:?$msg}" 
    : "${SERVER:?$msg}" 
    : "${BASELINK:?$msg}" 
    : "${NOTIFICATIONS:?$msg}" 
    : "${INTERACTIVE:?$msg}" 
} 

# Creates the new randomly generated filename for the remote destination
name_gen () {
    local filename=$1
    local extension=${filename##*.}
    filename=$(echo $RANDOM | md5sum | head -c 8; echo;)
    generated_name="$filename.$extension"
}

# macOS screencapture handler
mac_screencapture () {
   default_ssname=$SSFILEPATH"Screenshot_$(date +"%Y%m%d_%H%M%S").png"
   # default_vidname="vidcap_$(date +"%Y%m%d_%H%M%S").mp4"
   screencapture -i "$default_ssname"
   if [[ -e "$default_ssname" ]]; then
      echo "All good file made."
   else
      echo "Successfully exited"
      exit 0
   fi
}

# Finds the file to push to remote server
find_file() {
	if [[ "$(ls -A "$SSFILEPATH" 2>/dev/null)" ]] && [[ -z "$1" ]]; then # No argument provided, most recent file found
	    orig_file="$SSFILEPATH"$(ls -Art "$SSFILEPATH" | tail -n 1)
	    name_gen "$(ls -Art "$SSFILEPATH" | tail -n 1)"
	elif [[ "$(ls -A "$1"  2>/dev/null)" ]] && [[ -n "$1" ]]; then # Argument provided. Pick selected photo.
		orig_file="$1"
		name_gen "$1"
	else
		echo "FILE NOT FOUND!"
		exit 1
	fi
}

# Takes all the curated information, pushes it to the server, provides a link
push_logic () {
	scp -i "$KEYPATH" "$orig_file" "$USERNAME@$SERVER":"$REMOTEDIR$generated_name" # Transfer that file to the remote server
	if [[ $(os_check) == "Darwin" ]]; then
		echo "$BASELINK$generated_name" | pbcopy # Copies to macOS keyboard
	elif [[ $(os_check) == "Linux" ]]; then
		echo "$BASELINK$generated_name" | xclip # Copies to xclip keyboard
	else
		echo "Unable to determine OS, nothing copied to clipboard."
		echo "Link to file $BASELINK$generated_name"
		exit 1
	fi
	echo "Link to file $BASELINK$generated_name has been copied to clipboard!"
}

# Start of logic
pre_check

if [[ -z "$1" ]]; then # no options specified finds the most recent file in your screenshot folder
	find_file
	echo "Your most recent file is...$orig_file"
	push_logic
elif [[ "$#" == "1" && -e "$1" ]]; then # No option, only file selected to push
	find_file "$1"
	echo "Your selected file is $orig_file"
	push_logic
elif [[ "$1" == "-i" ]]; then
    mac_screencapture
    find_file
    echo "Your selected file is $orig_file" 
    push_logic
else
	echo "Not a valid option."
fi
