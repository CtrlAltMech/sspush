#!/usr/bin/env bash
#
# sspush
# Date: 5/9/2023
#
# A tool for macOS and Linux (Eventually) that pushes a screenshot/image 
# to a remote web server of your choosing via scp.
# 
# by CtrlAltMech
#



set -e

CONFIG="$HOME/.sspushrc"
SSFILEPATH=
REMOTEDIR=
USERNAME=
KEYPATH=
PORT=
SERVER=
BASELINK=
INTERACTIVE=
OS= 

# If no configuration file is seen it will prompt to generate one 
conf_prompt () {
    read -p "No configuration file found. Would you like to create one? (y/n): " confChoice
    
    while ! [[ $confChoice =~ (^y$|^Y$|^n$|^N$) ]]
    do
        read -p "Not a valid option. Would you like to create a config file? (y/n): " confChoice
    done
    if [[ $confChoice =~ (^y$|^Y$) ]]; then
        conf_make
    elif [[ "$confChoice" =~ (^n$|^N$) ]]; then
        echo "Goodbye!"
        exit 0
    fi
}

# Creates the configuration file
conf_make () {
	
	touch $CONFIG
	echo -e "# Config file for sspush\n" > $CONFIG
	echo -e "# Filepath where screenshots are stored" >> $CONFIG
	echo -e "SSFILEPATH=\"$SSFILEPATH\"\n" >> $CONFIG
	echo -e "# Remote directory where screenshots will be sent" >> $CONFIG
	echo -e "REMOTEDIR=\"$REMOTEDIR\"\n" >> $CONFIG
	echo -e "# Username for access to server" >> $CONFIG
	echo -e "USERNAME=\"$USERNAME\"\n" >> $CONFIG
	echo -e "# Private key location (script only works with ssh keys)" >> $CONFIG
	echo -e "KEYPATH=\"$KEYPATH\"\n" >> $CONFIG
	echo -e "# SSH port" >> $CONFIG
	echo -e "PORT=\"$PORT\"\n" >> $CONFIG
	echo -e "# Server IP or DNS name" >> $CONFIG
	echo -e "SERVER=\"$SERVER\"\n" >> $CONFIG
	echo -e "# Base link location (this is the link base that the user will visit. Example https://mysite.net/pics/<your image name>.jpg" >> $CONFIG
	echo -e "BASELINK=\"$BASELINK\"\n" >> $CONFIG
	echo -e "# Allow/Deny desktop notifications" >> $CONFIG
	echo -e "NOTIFICATIONS=\"$NOTIFICATIONS\"" >> $CONFIG
	echo -e "\nConfig file created!"
	exit 0
}

# Checks what OS this running on
os_Check () {
	if [[ "$(uname -s)" == "Darwin" ]]; then
		OS="Darwin"
	elif [[ "$(uname -s)" == "Linux" ]]; then
		OS="Linux"
	else
		echo "Unable to verify OS. Exiting...."
		exit 0
	fi
}

# Creates the new filename for the remote destination
name_gen () {
    filename=$1
    extension=${filename##*.}
    filename=$(echo $RANDOM | md5sum | head -c 8; echo;)
    generated_name="$filename.$extension"
}

# Finds the file to push to remote server 
find_file() {
	. $CONFIG # Source the config file
	if [[ "$(ls -A $SSFILEPATH 2>/dev/null)" ]] && [[ -z "$1" ]]; then # No argument provided, most recent file found
	    orig_file=$SSFILEPATH$(ls -Art $SSFILEPATH | tail -n 1)
	    name_gen "$(ls -Art $SSFILEPATH | tail -n 1)"
	    echo "This is the original file $orig_file"
	elif [[ "$(ls -A $1 2>/dev/null)" ]] && [[ -n "$1" ]]; then # Argument provided. Pick selected photo.
		realpath $1
	else
		echo "FILE NOT FOUND!"
		exit 0
	fi

}

# Takes all the generated information and pushes it to the server
main_logic () {
	scp -i $KEYPATH "$orig_file" $USERNAME@$SERVER:$REMOTEDIR$generated_name # Transfer that file to the remote server
	if [[ $OS == "Darwin" ]]; then 
		echo "$BASELINK$generated_name" | pbcopy # Copies to macOS keyboard
	elif [[ $OS == "Linux" ]]; then
		echo "$BASELINK$generated_name" | xclip # Copies to xclip keyboard
	fi
	echo "Link to file $BASELINK$generated_name has been copied to clipboard!"
}

# Start of test logic
os_Check # Check the OS

if ! [[ -f $CONFIG ]]; then
	conf_prompt
elif [[ -f $CONFIG ]] && [[ "$1" == "-s" && -n "$2" ]]; then # -s option allows you to select the image
	echo "Argument provided TEST LOGIC"
	find_file $2
	#echo "File selected to be pushed is...$(find_file)"
elif [[ -f $CONFIG ]] && [[ -z "$1" ]]; then # no options specified finds the most recent file in your screenshot folder
	find_file
	echo "Your most recent file is...$orig_file"
	main_logic
else
	echo "not a proper option"
fi












