#!/usr/bin/env bash
#
# sspush
# Date: 5/9/2023
#
# A tool for macOS and Linux (Eventually) that pushes a screenshot/image 
# to a remote web server of your choosing via scp.
# 
# by CtrlAltMech
#



set -e

CONFIG="$HOME/.sspushrc"
SSFILEPATH=
REMOTEDIR=
USERNAME=
KEYPATH=
PORT=
SERVER=
BASELINK=
INTERACTIVE=
OS= 

# If no configuration file is seen it will prompt to generate one 
confprompt () {
    read -p "No configuration file found. Would you like to create one? (y/n): " confChoice
    
    while ! [[ $confChoice =~ (^y$|^Y$|^n$|^N$) ]]
    do
        read -p "Not a valid option. Would you like to create a config file? (y/n): " confChoice
    done
    if [[ $confChoice =~ (^y$|^Y$) ]]; then
        confmake
    elif [[ "$confChoice" =~ (^n$|^N$) ]]; then
        echo "Goodbye!"
        exit 0
    fi
}

# Creates the configuration file
confmake () {
	
	touch $CONFIG
	echo -e "# Config file for sspush\n" > $CONFIG
	echo -e "# Filepath where screenshots are stored" >> $CONFIG
	echo -e "SSFILEPATH=\"$SSFILEPATH\"\n" >> $CONFIG
	echo -e "# Remote directory where screenshots will be sent" >> $CONFIG
	echo -e "REMOTEDIR=\"$REMOTEDIR\"\n" >> $CONFIG
	echo -e "# Username for access to server" >> $CONFIG
	echo -e "USERNAME=\"$USERNAME\"\n" >> $CONFIG
	echo -e "# Private key location (script only works with ssh keys)" >> $CONFIG
	echo -e "KEYPATH=\"$KEYPATH\"\n" >> $CONFIG
	echo -e "# SSH port" >> $CONFIG
	echo -e "PORT=\"$PORT\"\n" >> $CONFIG
	echo -e "# Server IP or DNS name" >> $CONFIG
	echo -e "SERVER=\"$SERVER\"\n" >> $CONFIG
	echo -e "# Base link location (this is the link base that the user will visit. Example https://mysite.net/pics/<your image name>.jpg" >> $CONFIG
	echo -e "BASELINK=\"$BASELINK\"\n" >> $CONFIG
	echo -e "# Allow/Deny desktop notifications" >> $CONFIG
	echo -e "NOTIFICATIONS=\"$NOTIFICATIONS\"" >> $CONFIG
	echo -e "\nConfig file created!"
	exit 0
}

# Generate 8 random characters
random_name () {
	echo $RANDOM | md5sum | head -c 8; echo;
}

# Checks what OS this running on
osCheck () {
	if [[ "$(uname -s)" == "Darwin" ]]; then
		OS="Darwin"
		echo "It's a mac"
	elif [[ "$(uname -s)" == "Linux" ]]; then
		OS="Linux"
		echo "Its a Linux"
	else
		echo "What the fuck is this then?"
		exit 0
	fi
}

# Find the most recent file
find_recent_file() {
	if [[ "$(ls -A $SSFILEPATH)" ]]; then
		ls -Art $SSFILEPATH | tail -n 1
	else
		echo "Folder is empty. Exiting..."
		exit 0
	fi
}

find_selected_file() {
	if
}

# Checks what OS this running on
osCheck () {
	if [[ "$(uname -s)" == "Darwin" ]]; then
		OS="Darwin"
	elif [[ "$(uname -s)" == "Linux" ]]; then
		OS="Linux"
	else
		echo "Unable to verify OS. Exiting...."
		exit 0
	fi
}



# Start of logic
# osCheck # Check the OS
# if [[ -f $CONFIG ]]; then
# 	. $CONFIG # Source the config file
# 	find_recent_file # finds latest file or exits if empty
# 	echo "Your most recent file is...$(find_recent_file)"
# 	filename=$(basename "$SSFILEPATH/$(find_recent_file)") # Finds the most recent file without the extension
# 	mv "${SSFILEPATH}$(find_recent_file)" "${SSFILEPATH}$(random_name).${filename##*.}" # Renames the file to random 8 character string
# 	scp -i $KEYPATH ${SSFILEPATH}$(find_recent_file) $USERNAME@$SERVER:$REMOTEDIR # Transfer that file to the remote server
# 	if [[ $OS == "Darwin" ]]; then 
# 		echo "$BASELINK$(find_recent_file)" | pbcopy # Copies to macOS keyboard
# 	elif [[ $OS == "Linux" ]]; then
# 		echo "$BASELINK$(find_recent_file)" | xclip # Copies to xclip keyboard
# 	fi
# echo "Link to file $BASELINK$(find_recent_file) has been copied to clipboard!"
# else
# 	confprompt
# fi


# Start of test logic
osCheck # Check the OS

if [[ -f $CONFIG ]] && [[ $1 == "-s" ]]; then
	
else
	echo "This didn't work."
fi












